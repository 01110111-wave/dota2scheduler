package util

import (
	"time"
)

type AutoGenerated struct {
	Leagues []struct {
		Info struct {
			LeagueID           int    `json:"league_id"`
			Name               string `json:"name"`
			Tier               int    `json:"tier"`
			Region             int    `json:"region"`
			URL                string `json:"url"`
			Description        string `json:"description"`
			Notes              string `json:"notes"`
			StartTimestamp     int    `json:"start_timestamp"`
			EndTimestamp       int    `json:"end_timestamp"`
			ProCircuitPoints   int    `json:"pro_circuit_points"`
			ImageBits          int    `json:"image_bits"`
			Status             int    `json:"status"`
			MostRecentActivity int    `json:"most_recent_activity"`
			RegistrationPeriod int    `json:"registration_period"`
		} `json:"info"`
		PrizePool struct {
			BasePrizePool     int           `json:"base_prize_pool"`
			TotalPrizePool    int           `json:"total_prize_pool"`
			PrizeSplitPctX100 []int         `json:"prize_split_pct_x100"`
			PrizePoolItems    []interface{} `json:"prize_pool_items"`
		} `json:"prize_pool"`
		Admins  []interface{} `json:"admins"`
		Streams []struct {
			StreamID          int    `json:"stream_id"`
			Language          int    `json:"language"`
			Name              string `json:"name"`
			BroadcastProvider int    `json:"broadcast_provider"`
			StreamURL         string `json:"stream_url"`
			VodURL            string `json:"vod_url"`
		} `json:"streams"`
		NodeGroups []struct {
			Name                          string        `json:"name"`
			NodeGroupID                   int           `json:"node_group_id"`
			ParentNodeGroupID             int           `json:"parent_node_group_id"`
			IncomingNodeGroupIds          []interface{} `json:"incoming_node_group_ids"`
			AdvancingNodeGroupID          int           `json:"advancing_node_group_id"`
			AdvancingTeamCount            int           `json:"advancing_team_count"`
			TeamCount                     int           `json:"team_count"`
			NodeGroupType                 int           `json:"node_group_type"`
			DefaultNodeType               int           `json:"default_node_type"`
			Round                         int           `json:"round"`
			MaxRounds                     int           `json:"max_rounds"`
			IsTiebreaker                  bool          `json:"is_tiebreaker"`
			IsFinalGroup                  bool          `json:"is_final_group"`
			IsCompleted                   bool          `json:"is_completed"`
			Phase                         int           `json:"phase"`
			Region                        int           `json:"region"`
			StartTime                     int           `json:"start_time"`
			EndTime                       int           `json:"end_time"`
			SecondaryAdvancingNodeGroupID int           `json:"secondary_advancing_node_group_id"`
			SecondaryAdvancingTeamCount   int           `json:"secondary_advancing_team_count"`
			TertiaryAdvancingNodeGroupID  int           `json:"tertiary_advancing_node_group_id"`
			TertiaryAdvancingTeamCount    int           `json:"tertiary_advancing_team_count"`
			EliminationDpcPoints          int           `json:"elimination_dpc_points"`
			TeamStandings                 []struct {
				Standing            int    `json:"standing"`
				TeamID              int    `json:"team_id"`
				TeamName            string `json:"team_name"`
				TeamTag             string `json:"team_tag"`
				TeamLogo            string `json:"team_logo"`
				TeamLogoURL         string `json:"team_logo_url"`
				Wins                int    `json:"wins"`
				Losses              int    `json:"losses"`
				Score               string `json:"score"`
				TeamAbbreviation    string `json:"team_abbreviation"`
				ScoreTiebreakGroup  string `json:"score_tiebreak_group"`
				ScoreTiebreakBelow  string `json:"score_tiebreak_below"`
				ScoreTiebreakRandom string `json:"score_tiebreak_random"`
				IsPro               bool   `json:"is_pro"`
			} `json:"team_standings"`
			Nodes      []interface{} `json:"nodes"`
			NodeGroups []struct {
				Name                          string        `json:"name"`
				NodeGroupID                   int           `json:"node_group_id"`
				ParentNodeGroupID             int           `json:"parent_node_group_id"`
				IncomingNodeGroupIds          []interface{} `json:"incoming_node_group_ids"`
				AdvancingNodeGroupID          int           `json:"advancing_node_group_id"`
				AdvancingTeamCount            int           `json:"advancing_team_count"`
				TeamCount                     int           `json:"team_count"`
				NodeGroupType                 int           `json:"node_group_type"`
				DefaultNodeType               int           `json:"default_node_type"`
				Round                         int           `json:"round"`
				MaxRounds                     int           `json:"max_rounds"`
				IsTiebreaker                  bool          `json:"is_tiebreaker"`
				IsFinalGroup                  bool          `json:"is_final_group"`
				IsCompleted                   bool          `json:"is_completed"`
				Phase                         int           `json:"phase"`
				Region                        int           `json:"region"`
				StartTime                     int           `json:"start_time"`
				EndTime                       int           `json:"end_time"`
				SecondaryAdvancingNodeGroupID int           `json:"secondary_advancing_node_group_id"`
				SecondaryAdvancingTeamCount   int           `json:"secondary_advancing_team_count"`
				TertiaryAdvancingNodeGroupID  int           `json:"tertiary_advancing_node_group_id"`
				TertiaryAdvancingTeamCount    int           `json:"tertiary_advancing_team_count"`
				EliminationDpcPoints          int           `json:"elimination_dpc_points"`
				TeamStandings                 []struct {
					Standing            int    `json:"standing"`
					TeamID              int    `json:"team_id"`
					TeamName            string `json:"team_name"`
					TeamTag             string `json:"team_tag"`
					TeamLogo            string `json:"team_logo"`
					TeamLogoURL         string `json:"team_logo_url"`
					Wins                int    `json:"wins"`
					Losses              int    `json:"losses"`
					Score               string `json:"score"`
					TeamAbbreviation    string `json:"team_abbreviation"`
					ScoreTiebreakGroup  string `json:"score_tiebreak_group"`
					ScoreTiebreakBelow  string `json:"score_tiebreak_below"`
					ScoreTiebreakRandom string `json:"score_tiebreak_random"`
					IsPro               bool   `json:"is_pro"`
				} `json:"team_standings"`
				Nodes []struct {
					Name            string `json:"name"`
					NodeID          int    `json:"node_id"`
					NodeGroupID     int    `json:"node_group_id"`
					WinningNodeID   int    `json:"winning_node_id"`
					LosingNodeID    int    `json:"losing_node_id"`
					IncomingNodeID1 int    `json:"incoming_node_id_1"`
					IncomingNodeID2 int    `json:"incoming_node_id_2"`
					NodeType        int    `json:"node_type"`
					ScheduledTime   int    `json:"scheduled_time"`
					ActualTime      int    `json:"actual_time"`
					SeriesID        int    `json:"series_id"`
					TeamID1         int    `json:"team_id_1"`
					TeamID2         int    `json:"team_id_2"`
					Matches         []struct {
						MatchID       string `json:"match_id"`
						WinningTeamID int    `json:"winning_team_id"`
					} `json:"matches"`
					Team1Wins   int   `json:"team_1_wins"`
					Team2Wins   int   `json:"team_2_wins"`
					HasStarted  bool  `json:"has_started"`
					IsCompleted bool  `json:"is_completed"`
					StreamIds   []int `json:"stream_ids"`
					Vods        []struct {
						SeriesGame int    `json:"series_game"`
						StreamID   int    `json:"stream_id"`
						URL        string `json:"url"`
					} `json:"vods"`
				} `json:"nodes"`
				NodeGroups []interface{} `json:"node_groups"`
			} `json:"node_groups"`
		} `json:"node_groups"`
		SeriesInfos []struct {
			SeriesID   int      `json:"series_id"`
			SeriesType int      `json:"series_type"`
			StartTime  int      `json:"start_time"`
			MatchIds   []string `json:"match_ids"`
			TeamID1    int      `json:"team_id_1"`
			TeamID2    int      `json:"team_id_2"`
		} `json:"series_infos"`
		RegisteredPlayers []struct {
			AccountID int    `json:"account_id"`
			Name      string `json:"name"`
			TeamID    int    `json:"team_id"`
		} `json:"registered_players"`
	} `json:"leagues"`
}

type Team struct {
	Name string
	Tag  string
}

type Match struct {
	Team1         Team
	Team2         Team
	StartTime     time.Time
	UnixStartTime int
	BO            int
}

type League struct {
	Name   string
	Region string
	Matchs []Match
	URL    string
}
